from typing import Dict
from pythonbacktest.indicatorcalculator import IndicatorsMap
from pythonbacktest.indicatorshistory import AbstractSnapshot


class ReferencialSnapshot(AbstractSnapshot):
    """
    This snapshot will store only references to the latest results
    generated by the individual indicators. It won't be making actual copy
    of the data from those indicators.
    - Advantages: very fast, no copy operation involved
    - Disadvantages: can't be used if value of the indicator for the given timestamp will change
    """

    def __init__(self, indicators_map: IndicatorsMap):
        # because this is just referencial snapshot, we need to know how much data should be returned
        # when called asks about all results;
        self.__snapshot_length = -1

        self.__all_snapshots_values_dict = {}
        self.__latest_snapshots_values_dict = {}

        super().__init__(indicators_map)

    def _take_snapshot(self, indicators_map: IndicatorsMap) -> tuple:
        """
        Take snapshot of the values in the IndicatorsMap
        :param indicators_map: Map of the indicators
        """
        for single_indicator in indicators_map.all_indicators():
            indicator_name = single_indicator.indicator_name

            indicator_all_results = single_indicator.all_results
            indicator_latest_result = single_indicator.latest_result

            if not indicator_all_results:
                raise ValueError(f"Indicator {indicator_name} returned null or empty all results.")

            self.__all_snapshots_values_dict[indicator_name] = indicator_all_results
            self.__latest_snapshots_values_dict[indicator_name] = indicator_latest_result

            current_len = len(indicator_all_results)
            snapshot_length = self.__snapshot_length
            if snapshot_length == -1:
                self.__snapshot_length = current_len
            elif snapshot_length != current_len:
                raise ValueError(f"Expected len={snapshot_length}, got {current_len}")

    @property
    def latest_snapshot_values(self) -> Dict:
        return self.__latest_snapshots_values_dict

    @property
    def all_snapshot_values(self) -> Dict:
        snapshot_values_result = {}

        # we need a copy of the snapshot with data cut to the maximum length
        for indicator_name, indicator_data in self.__all_snapshots_values_dict.items():
            snapshot_values_result[indicator_name] = indicator_data[:self.__snapshot_length]

        return snapshot_values_result



